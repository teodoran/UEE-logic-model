<!DOCTYPE HTML>
<head>
	<script type="text/javascript" src="https://github.com/jashkenas/coffee-script/raw/master/extras/coffee-script.js"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
	<script type="text/javascript" src="http://documentcloud.github.com/underscore/underscore-min.js"></script>
	<script type="text/javascript" src="keyboard-controller.js"></script>
	<link rel="stylesheet" type="text/css" href="model-style.css" />
	<title>UEE model test</title>
	<script type="text/coffeescript">
		makeSearch = (x, y, maxTurnAngle, boatAngle) ->
			search =
				x: x
				y: y
				turnAngle: maxTurnAngle
				prevBoatAngle: boatAngle

		makeBeacon = (x, y, range) ->
			beacon = 
				x: x
				y: y
				range: range

		makeEntity = (x, y) ->
			entity = 
				x: x
				y: y
				speed: 4.0
				heading: Math.PI/2
				rudderAngle: 0.0
				prevSignal: 0.0

		winHeight = window.innerHeight
		winWidth = window.innerWidth
		step = 0
		run = false
		maxTurnAngle = Math.PI/32

		torpedo = makeEntity winWidth*0.65, winHeight*0.5
		beacon = makeBeacon 500, 500, 400
		search = makeSearch torpedo.x, torpedo.y, maxTurnAngle, torpedo.heading
		signalData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		meanSignal = [0, 0]

		radToDeg = (radian) -> return radian*(180/Math.PI)

		distance = (entity1, entity2) ->
			dx = entity2.x - entity1.x
			dy = entity2.y - entity1.y
			return Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2))

		signalStrength = (torpedo, beacon) ->
			if (distance torpedo, beacon) > beacon.range
				return 0
			if (distance torpedo, beacon) < 1
				return Math.pow(beacon.range,2)
			return Math.pow(beacon.range,2)*(1/Math.pow((distance torpedo, beacon),2))

		turnRudder = (keyCode) ->
			turnAngle = Math.PI/256
			switch keyCode
				when 39 then if torpedo.rudderAngle + turnAngle < maxTurnAngle 
								torpedo.rudderAngle += turnAngle
				when 37 then if torpedo.rudderAngle - turnAngle > -maxTurnAngle
								torpedo.rudderAngle -= turnAngle

		updateSearch = (search, torpedo) ->
			r = distance torpedo, search
			search.turnAngle = search.turnAngle*(1 - (1/(r*0.01+10)))

		autoTurnRudder = (torpedo, beacon) ->
			if (signalStrength torpedo, beacon) > 400
				console.log("False!")
				run = false
			if (step % 15) == 0
				meanSignal.shift()
				meanSignal.push(signalStrength torpedo, beacon)
				console.log(meanSignal)
				if meanSignal[0] <= 0
					updateSearch search, torpedo
					torpedo.rudderAngle = search.turnAngle
				if meanSignal[1] > meanSignal[0]
					torpedo.rudderAngle = 0
				if meanSignal[1] < meanSignal[0]
					torpedo.rudderAngle = -maxTurnAngle

		moveTorpedo = (entity) ->
			entity.heading += entity.rudderAngle
			entity.x += entity.speed*Math.cos(entity.heading)
			entity.y += entity.speed*Math.sin(entity.heading)

		drawScreen = (board) ->
			do board.children().remove
			board.append "<div class=\"torpedo\" style=\"left:"+torpedo.x+"px; top:"+torpedo.y+"px; -webkit-transform: rotate("+torpedo.heading+"rad);\">"
			board.append "<div class=\"beacon\" style=\" left:"+(beacon.x-beacon.range)+"px; top:"+(beacon.y-beacon.range)+"px; width:"+beacon.range*2+"px; height:"+beacon.range*2+"px; border-radius:"+beacon.range+"px;\">"

		gameLoop = (board) ->
			$("#step").text step += 1
			$("#distance").text Math.round(distance torpedo, beacon)
			$("#signalStrength").text Math.round(signalStrength torpedo, beacon)
			$("#rudderAngle").text Math.round(radToDeg torpedo.rudderAngle)
			autoTurnRudder torpedo, beacon
			moveTorpedo torpedo
			drawScreen board
			if run
				setTimeout (-> gameLoop board), 24

		$ ->
			run = true
			KeyboardController { 
				37: (-> turnRudder 37), 
				39: (-> turnRudder 39)}, 24
			gameLoop $("#board")		
	      
	</script>
</head>

<body>
	<div class="info">
		<p>step: <span id="step"></span></p>
		<p>distance: <span id="distance"></span></p>
		<p>signalStrength: <span id="signalStrength"></span></p>
		<p>rudderAngle: <span id="rudderAngle"></span></p>
	</div>	
	<div id="board"></div>
</body>